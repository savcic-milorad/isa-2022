/**
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class was initially auto generated by the swagger code generator program,
 * and afterwards manually edited.
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Configuration } from '../configuration';
import { ApplicationUserDto, CreateDonorCommand, CreatedDonorDto, LoginCommand, LoginSuccessDto } from '@transfusion/transfusion-api-client';

@Injectable({
    providedIn: 'root'
})
export class IdentityService {

    public defaultHeaders = new HttpHeaders({
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    });

    constructor(protected httpClient: HttpClient, protected configuration: Configuration) { }

    /**
     * @param applicationUserId
     * @param reportProgress flag to report request and response progress.
     */
    public apiIdentityApplicationUsersApplicationUserIdGet(applicationUserId: string): Observable<HttpResponse<ApplicationUserDto>> {

        if (applicationUserId === null || applicationUserId === undefined) {
            throw new Error('Required parameter applicationUserId was null or undefined when calling apiIdentityApplicationUsersApplicationUserIdGet.');
        }

        return this.httpClient.request<ApplicationUserDto>('get', `${this.configuration.basePath}/api/Identity/ApplicationUsers/${encodeURIComponent(String(applicationUserId))}`,
            {
                headers: this.defaultHeaders,
                observe: 'response'
            }
        );
    }

    /**
     * @param body
     * @param reportProgress flag to report request and response progress.
     */
    public apiIdentityDonorsPost(body?: CreateDonorCommand): Observable<HttpResponse<CreatedDonorDto>> {

        return this.httpClient.request<CreatedDonorDto>('post', `${this.configuration.basePath}/api/Identity/Donors`,
            {
                body: body,
                headers: this.defaultHeaders,
                observe: 'response'
            }
        );
    }

    /**
     * @param body
     * @param reportProgress flag to report request and response progress.
     */
     public apiIdentityLoginPost(body?: LoginCommand): Observable<HttpResponse<LoginSuccessDto>> {

      return this.httpClient.request<LoginSuccessDto>('post', `${this.configuration.basePath}/api/Identity/Login`,
          {
              body: body,
              headers: this.defaultHeaders,
              observe: 'response'
          }
      );
  }
}
