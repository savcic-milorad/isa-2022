import { Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { IdentityService } from "../../shared/transfusion-api-client/api/identity.service";
import { CenterSearchParameters } from "./models/center-search-parameters";
import { AnonymousState } from "./state/anonymous.state";

@Injectable()
export class AnonymousFacade {

  constructor(private identityApi: IdentityService, private anonymousState: AnonymousState) { }

  isUpdating$(): Observable<boolean> {
    return this.anonymousState.isUpdating$();
  }

  getCenterSearchParameters$(): Observable<CenterSearchParameters> {
    // state can be projected, or result from combination of multiple observables, or cached
    return this.anonymousState.getCenterSearchParameters$();
  }

  // TODO
  // loadCashflowCategories() {
  //   return this.centerApi...
  // }

  // optimistic update
  // 1. update UI state
  // 2. call API
  // addCenter(addedCenterInStateWithoutId: Center) {
    
  //   // state update
  //   this.anonymousState.addCenter(addedCenterInStateWithoutId);

  //   // api call
  //   this.api.createCenter(addedCenterInStateWithoutId)
  //     .subscribe(
  //       (addedCenterFromApiWithId: Center) => {
  //         // success callback - we have id generated by the server, let's update the state
  //         this.anonymousState.updateCenter(addedCenterInStateWithoutId, addedCenterFromApiWithId);
  //       },
  //       (error: any) => {
  //         // error callback - we need to rollback the state change
  //         this.anonymousState.removeCenter(addedCenterInStateWithoutId);
  //         console.log(error);
  //       }
  //     );
  // }

  // pessimistic update
  // 1. call API
  // 2. update UI state
  // updateCashflowCategory(center: Center) {
  //   this.anonymousState.setUpdating(true);
  //   this.centerApi.updateCenter(center)
  //     .subscribe(
  //       () => this.anonymousState.updateCenter(center),
  //       (error) => console.log(error),
  //       () => this.anonymousState.setUpdating(false)
  //     );
  // }
}